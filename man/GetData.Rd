% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GetData.R
\name{GetData}
\alias{GetData}
\title{Daten Importieren}
\usage{
GetData(
  path = NA,
  na.strings = NULL,
  force.numeric = FALSE,
  Tabel_Expand = FALSE,
  id.vars = 1,
  value = "value",
  Data_info = date(),
  sep = ";",
  quote = "\\"",
  dec = ".",
  user_na = FALSE,
  reencode = FALSE,
  output = TRUE,
  sheet = 1,
  range = NULL,
  skip = 0,
  ...
)
}
\arguments{
\item{path}{Demo.xla, 
Demo.sav, 
Demo.csv  - ist ein Pfad zu einem csv, xls, sav oder Rdata Datensatz 
oder ein String in Textformat dierekt im R-File.}

\item{na.strings}{c(NA,9999,"") - Fehlende Werte}

\item{force.numeric}{logical FALSE}

\item{Tabel_Expand}{logical FALSE - Tabellen mit haufigkeiten werden als Dataframe im long-Format ausgegeben}

\item{id.vars}{nur mit Tabel_Expand  - Nummer und Name der ID-Variablen bei Tabel_Expand default ist 1.}

\item{value}{nur mit Tabel_Expand  - Name der output-variable bei Tabel_Expand.}

\item{Data_info}{Data_info = date(),}

\item{sep, quote, dec}{Lesen der csv- Files = ";", = "\"", ".",}

\item{user_na}{If TRUE variables with user defined missing will be read into labelled_spss objects. If FALSE, the default, user-defined missings will be converted to NA.}

\item{reencode}{UTF-8 = FALSE,}

\item{output}{Text Info zu File}

\item{sheet, skip, range}{an readxl::read_excel}

\item{...}{Argumente fuer spss und csv. Bei SPSS-Files  kann die Zeichencodierung mit  \code{reencode ="UTF-8"} geaendert werden.}
}
\description{
Ladet verschiedene Dateiformate von csv bis sav.  Tabellen im Text-Format koennen direkt gelesen werden.
Zurueckgegeben wird ein   data.frame mit Levels und Labels siehe \link{upData}.
\subsection{CSV-Files}{Liest CSV-Files siehe \link{read.csv}   uebergeben werden Trennzeichen, Komma, usw.
  }
\subsection{xls}{
Verwendet readxl::read_excel
  }
\subsection{Text direkt im R-File}{
 Es lassen sich direkt Daten als Text einlesen dabei kann mit \code{Tabel_Expand = TRUE, id.vars = 1:2} gesteuert
 werden ob eine Kreuztabelle aufgedroeselt werden soll.
  }
\subsection{SPSS}{
Mit \code{GetData("Dummy.sav", reencode="UTF-8")} lassen sich SPSS-Files einlesen. Bei SPSS
Dateien (sav und por) werden leere Labels
automatisch bereinigt dH sie werden durch die Number des Faktors ersaetzt. Probleme
machen lange Text-Variablen im SPSS-File, die sollten im Falle geloescht werden. Weitere
Info unter  \link{spss.get} und \link{read.spss}.
Neu ist das  die Default-Option   spss.get() is  um mit haven zu Arbeitenist als Parameter  \code{type=2}
zu ?bergeben. Bei haven werden zusetzlich die Faktoren bereinigt.
  }
\subsection{LimeSurvy}{
 Hier muss eine Liste uebergeben werden die die Filenamen beinhaltet 
 also \code{GetData(list("file.R","file.txt"))}.
 Das erste File ist das R-File mit den Labels das zweite die Daten. 
 Weitere moegliche Parameter sind die Zeichencodierung.
 }
\subsection{RData}{
 Hier erfolgt das Einlesen einfach ueber \code{load(File, ...)}, besser ist es daher direkt den Befehl zu verwenden.
 }
}
\examples{

 dat<-GetData("
sex treatment control
m  2 3
f  3 4
",Tabel_Expand = TRUE, id.vars = 1)

xtabs(~sex +value, dat)


dat<-GetData("
sex treatment  neg  pos 
f   KG          3   3
f   UG          4   5
m   KG          5   4
m   UG          4   2
",Tabel_Expand = TRUE, id.vars = 1:2, value="befund")

ftable(xtabs(~sex +treatment +befund, dat))




 dat1 <- rockchalk::genCorrelatedData(N=250, 
means=c(100,100),
sds=c(30,20), 
rho=0.0,  stde = 7, 
beta=c(1.1, 2.4, 4.1, 0))

#summary(dat1)
#m1 <- lm(y ~ x1 + x2, data=dat1)




#' 
#' #Exporting data is handled with one function, export():

library("rio")

export(mtcars, "mtcars.csv") # comma-separated values
export(mtcars, "mtcars.rds") # R serialized
export(mtcars, "mtcars.sav") # SPSS
#A particularly useful feature of rio is the ability to import from and export to #compressed (e.g., zip) directories, saving users the extra step of compressing a large #exported file, e.g.:

export(mtcars, "mtcars.tsv.zip")
#As of rio v0.5.0, export() can also write multiple data farmes to respective sheets of #an Excel workbook or an HTML file:

export(list(mtcars = mtcars, iris = iris), file = "mtcars.xlsx")


x <- import("mtcars.csv")
y <- import("mtcars.rds")
z <- import("mtcars.sav")
}
